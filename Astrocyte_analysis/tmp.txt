	const char *winName = "image", *eqWinName = "1. equalized image",
		*filtWinName = "2. erode",
		*threshWinName = "3. threshold(filtered image)",
		*blurWinName = "4. medianBlur(threshold)",
		*dstTransWinName = "5. distanceTransmy_form";
	char key = -1;
	char str[4];
	Mat previmg, max_img;
	Mat all_flows[600];
	max_img.create (n, m, CV_64FC1);
	max_img.setTo (-std::numeric_limits<float>::infinity ());
	clock_t be = clock ();
	for (int i = 0; i < nt; i++) {
		Mat img (n, m, CV_64FC1, data + i * n * m), grayImg, equalizedImg,
			filteredImg, threshImg, blurredImg, dstTransImg, flow, cflow;
		//img.convertTo(grayImg, CV_8UC1);
		double minVal, maxVal;
		minMaxLoc (img, &minVal, &maxVal); //find minimum and maximum intensities
		img.convertTo (grayImg, CV_8U, 255.0 / (maxVal - minVal), -minVal * 255.0 / (maxVal - minVal));
		blur (img, img, Size (5, 5));
		max_img = max (img, max_img);
		//threshold(filteredImg, threshImg, threshold_value, threshold_max_value, THRESH_TOZERO | CV_THRESH_OTSU);
		grayImg.copyTo (filteredImg);
		//filteredImg.copyTo(threshImg);
		threshold (filteredImg, threshImg, threshold_value, threshold_max_value,
			THRESH_TOZERO | CV_THRESH_OTSU);

		//medianBlur(threshImg, blurredImg, coresize);

		distanceTransmy_form (threshImg, dstTransImg, CV_DIST_L1, coresize);
		normalize (dstTransImg, dstTransImg, 0, 1., NORM_MINMAX);
		if (previmg.data) {
			calcOpticalFlowFarneback (previmg, threshImg, flow, 0.5, 3, 15, 3, 5, 1.2, 0);
			cvtColor (previmg, cflow, COLOR_GRAY2BGR);
			drawOptFlowMap (flow, cflow, 8, 1.5, Scalar (0, 100, 0), Scalar (0, 0, 255));
			//imshow("flow", cflow);
		}
		all_flows[i] = flow;
		threshImg.copyTo (previmg);
	}
	
	
	double minVal, maxVal;
	Mat gray_img;
	minMaxLoc (max_img, &minVal, &maxVal); //find minimum and maximum intensities
	max_img.convertTo (gray_img, CV_8U, 255.0 / (maxVal - minVal), -minVal * 255.0 / (maxVal - minVal));
	imshow ("bm3d max: ", gray_img);	
	cout << clock () - be << endl;
	
	/*previmg.release ();
	for (int i = 0; i < nt && key != escape; i++) {
		Mat img (n, m, imgtype, data + i * n * m), grayImg, equalizedImg,
			filteredImg, threshImg, blurredImg, dstTransImg, flow, cflow;
		//img.convertTo(grayImg, CV_8UC1);
		double minVal, maxVal;
		minMaxLoc (img, &minVal, &maxVal); //find minimum and maximum intensities
		img.convertTo (grayImg, CV_8U, 255.0 / (maxVal - minVal), -minVal * 255.0 / (maxVal - minVal));


		// equalizeHist(grayImg, equalizedImg);
		// imwrite(storepath + string(itoa(i, str, 10)) + imgext, equalizedImg);

		// erode(equalizedImg, filteredImg, Mat());
		grayImg.copyTo (filteredImg);
		//filteredImg.copyTo(threshImg);
		threshold (filteredImg, threshImg, threshold_value, threshold_max_value,
			THRESH_TOZERO | CV_THRESH_OTSU);

		//medianBlur(threshImg, blurredImg, coresize);

		distanceTransmy_form (threshImg, dstTransImg, CV_DIST_L1, coresize);
		normalize (dstTransImg, dstTransImg, 0, 1., NORM_MINMAX);
		if (previmg.data) {
			//calcOpticalFlowFarneback(previmg, threshImg, flow, 0.5, 3, 15, 3, 5, 1.2, 0);
			cvtColor (previmg, cflow, COLOR_GRAY2BGR);
			drawOptFlowMap (all_flows[i], cflow, 8, 1.5, Scalar (0, 100, 0), Scalar (0, 0, 255));
			imshow ("flow", cflow);
		}

		imshow (winName, grayImg);
		//imshow(eqWinName, equalizedImg);
		imshow (filtWinName, filteredImg);
		imshow (threshWinName, threshImg);
		// imshow(blurWinName, blurredImg);
		imshow (dstTransWinName, dstTransImg);
		threshImg.copyTo (previmg);
		key = waitKey ();
	}*/

	{
		Mat src (n, m, imgtype, data);
		/// Establish the number of bins
		int histSize = 256;

		/// Set the ranges ( for B,G,R) )

		bool unimy_form = true; bool accumulate = false;

		Mat hist;
		double minVal, maxVal;
		minMaxLoc (src, &minVal, &maxVal); //find minimum and maximum intensities

		src.convertTo (src, CV_8U, 255.0 / (maxVal - minVal), -minVal * 255.0 / (maxVal - minVal));
		minMaxLoc (src, &minVal, &maxVal); //find minimum and maximum intensities
		imshow (winName, src);
		float range[] = { minVal, maxVal };
		const float* histRange = { range };

		/// Compute the histograms:
		calcHist (&src, 1, 0, Mat (), hist, 1, &histSize, &histRange, unimy_form, accumulate);

		// Draw the histograms for B, G and R
		int hist_w = 512; int hist_h = 400;
		int bin_w = cvRound ((double)hist_w / histSize);

		Mat histImage (hist_h, hist_w, CV_8UC3, Scalar (0, 0, 0));

		/// Normalize the result to [ 0, histImage.rows ]
		normalize (hist, hist, 0, histImage.rows, NORM_MINMAX, -1, Mat ());

		/// Draw for each channel
		for (int i = 1; i < histSize; i++) {
			line (histImage, Point (bin_w*(i - 1), hist_h - cvRound (hist.at<float> (i - 1))),
				Point (bin_w*(i), hist_h - cvRound (hist.at<float> (i))),
				Scalar (255, 0, 0), 2, 8, 0);
		}

		/// Display
		namedWindow ("calcHist Demo", CV_WINDOW_AUTOSIZE);
		imshow ("calcHist Demo", histImage);

		waitKey (0);
	}




	
void ex_watershed (Mat img0)
{
	Mat markerMask, img, imgGray;
	img0.copyTo (img);
	cvtColor (img, markerMask, COLOR_BGR2GRAY);
	cvtColor (markerMask, imgGray, COLOR_GRAY2BGR);
	markerMask = Scalar::all (0);

	int i, j, compCount = 0;
	vector<vector<Point> > contours;
	vector<Vec4i> hierarchy;

	findContours (markerMask, contours, hierarchy, CV_RETR_CCOMP, CV_CHAIN_APPROX_SIMPLE);

	if (contours.empty ()) return;
	Mat markers (markerMask.size (), CV_32S);
	markers = Scalar::all (0);
	int idx = 0;
	for (; idx >= 0; idx = hierarchy[idx][0], compCount++)
		drawContours (markers, contours, idx, Scalar::all (compCount + 1), -1, 8, hierarchy, INT_MAX);

	if (compCount == 0) return;

	vector<Vec3b> colorTab;
	for (i = 0; i < compCount; i++) {
		int b = theRNG ().unimy_form (0, 255);
		int g = theRNG ().unimy_form (0, 255);
		int r = theRNG ().unimy_form (0, 255);

		colorTab.push_back (Vec3b ((uchar)b, (uchar)g, (uchar)r));
	}

	double t = (double)getTickCount ();
	watershed (img0, markers);
	t = (double)getTickCount () - t;
	printf ("execution time = %gms\n", t*1000. / getTickFrequency ());

	Mat wshed (markers.size (), CV_8UC3);

	// paint the watershed image
	for (i = 0; i < markers.rows; i++)
		for (j = 0; j < markers.cols; j++) {
			int index = markers.at<int> (i, j);
			if (index == -1)
				wshed.at<Vec3b> (i, j) = Vec3b (255, 255, 255);
			else if (index <= 0 || index > compCount)
				wshed.at<Vec3b> (i, j) = Vec3b (0, 0, 0);
			else
				wshed.at<Vec3b> (i, j) = colorTab[index - 1];
		}

	wshed = wshed*0.5 + imgGray*0.5;
	imshow ("watershed transmy_form", wshed);

}



	//li.append ({ STR ("double"), STR ("double2") });
	//li.at (0).append (std::initializer_list <std::wstring> ({ STR ("double"), STR ("double2") }));
	
	//li.insert (listbox::index_pair ({ 0, 0 }), STR ("int00") );
	//li.insert (listbox::index_pair ({ 0, 1 }), STR ("int01"));
	//li.insert (listbox::index_pair ({ 1, 0 }), STR ("int10"));
	//li.insert (listbox::index_pair ({ 1, 0 }), STR ("int10"));
		//append ({ STR ("int2") });
	
	//li.events ().checked ([]{  });
	
	//cout << clock () << endl;
	//li.show ();
	//pic.show ();
	
	

	//astrocyte astro("F:\\PC\\Document Files\\UNN\\3 course\\Coursework\\Data\\2015.04.28\\2013-05-22_fileNo03\\bm3d_2013-05-22_fileNo03_z-max.mat");
	//astro.preprocessing ();
	//astro.draw_morphology ("F:\\PC\\Document Files\\UNN\\3 course\\Coursework\\Data\\2015.04.28\\2013-05-22_fileNo03\\bm3d_2013-05-22_fileNo03_z-max_morphology.avi");
	//astro.calc_clusters (30, 5, 10, 0.5, 0.5);
	//cout << "start read file" << endl;
	//current_path (fs::path (matdir));
	
	/*
	path current_dir (matdir);
	boost::regex pattern (".*.mat");
	for (recursive_directory_iterator iter (current_dir), end; iter != end; ++iter) {
		std::string name = iter->path ().leaf ().string();
		if (regex_match (name, pattern)) {
		std::cout << name << "\n";
		clock_t be = clock ();
		matfilename = name;
		matfiledir = iter->path ().branch_path ().string();
		current_path (fs::path (matfiledir));
		int img_type, type_size;
		int success = read (iter->path ().string().c_str (), matvarname, pa, data, n, m, nt, img_type, type_size);
		cout << "read file: " << clock () - be << endl;
		if (success != 0) continue;
		calc_max_thr (data, n, m, nt, img_type, type_size);
		mxDestroyArray (pa);
		}
	}*/
	/*
	matfiledir = matdir;
	clock_t be = clock ();
	video_data astrocyte;
	int success = read ((matfiledir + matfilename).c_str (), matvarname, pa, astrocyte);

	cout << "file read: " << clock () - be << endl;
	if (success != 0) return 1;

	current_path (fs::path (matdir "0"));

	// draw_morphology (astrocyte);

	// calculate graph
	video_data motion, astrocyte_color;
	preprocessing (astrocyte, astrocyte_color);
	calc_back_sub (astrocyte_color, motion);
	mxDestroyArray (pa);
	calc_clusters (astrocyte_color, motion, 30, 5, 10, 0.5, 0.5);
	*/
	
	//Mat a, b;
	
	/*
	IplImage* image = 0;
	IplImage* templ = 0;
	IplImage* dst = 0;
	// имя картинки задаётся первым параметром
	char* filename = argc >= 2 ? argv[1] : "Image0.jpg";
	// получаем картинку
	image = cvLoadImage (filename, 1);

	printf ("[i] image: %s\n", filename);
	assert (image != 0);

	// шаблон
	char* filename2 = argc >= 3 ? argv[2] : "templ.bmp";
	printf ("[i] template: %s\n", filename2);

	templ = cvLoadImage (filename2, 1);
	assert (templ != 0);

	cvNamedWindow ("origianl", CV_WINDOW_AUTOSIZE);
	cvNamedWindow ("template", CV_WINDOW_AUTOSIZE);
	cvNamedWindow ("res", CV_WINDOW_AUTOSIZE);

	dst = cvCloneImage (templ);

	// размер шаблона
	int width = templ->width;
	int height = templ->height;

	// оригинал и шаблон
	cvShowImage ("origianl", image);
	cvShowImage ("template", templ);

	int x = 0;
	int y = 0;
	// задаём весовые коэффициенты
	double alpha = 0.5;
	double beta = 0.3;
	// устанавливаем область интереса
	cvSetImageROI (image, cvRect (x, y, width, height));
	// взвешенная сумма
	cvAddWeighted (image, alpha, templ, beta, 0.0, dst);
	// освобождаем область интереса
	

	// показываем результат
	cvShowImage ("res", dst);
	cvCopy (dst, image);
	cvResetImageROI (image);
	cvShowImage ("res", image);

	// ждём нажатия клавиши
	cvWaitKey (0);

	// освобождаем ресурсы
	cvReleaseImage (&image);
	cvReleaseImage (&templ);
	cvReleaseImage (&dst);
	cvDestroyAllWindows ();*/